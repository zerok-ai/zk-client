# Default values for curbiq.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  zk-operator:
    repo: "us-west1-docker.pkg.dev/zerok-dev/zerok-cli/zk-operator"
    tag: "4163e639a976ce18f3c18b208c9be181a82b61cd"  
  zk-scenario-manager:
    enabled: true
    repo: "us-west1-docker.pkg.dev/zerok-dev/zerok-cli/zk-scenario-manager"
    tag: "fa86f1f4740138c3861ff38261a47e6dbc025434"
  zk-daemonset:
    enabled: true
    repo: "us-west1-docker.pkg.dev/zerok-dev/zerok-cli/zk-daemonset"
    tag: "bd29f4184a68575838709c285201b6e88e0dc1b2"
  zk-wsp:
    enabled: true
    repo: "us-west1-docker.pkg.dev/zerok-dev/zerok-cli/zk-wsp-client"
    tag: "227159157a370c39c51db23d9649956aa26ca79f"
  image:
    pullPolicy: Always
  data:
    PX_API_KEY: ""
    cluster_key: ""

zk-wsp:
  routes:
    zkCloudAddr: "loadcloud01.getanton.com"

redis:
  enabled: true
  architecture: "standalone"
  nameOverride: redis
  auth:
    enabled: false
  image:
    tag: "6.2.12-debian-11-r23"

postgresql:
  enabled: true
  architecture: "standalone"
  global:
    postgresql:
      auth:
        postgresPassword: "eo1Mgtm6HI"
  primary:
    initdb: 
       scripts:
          init.sql : |
              CREATE DATABASE pl;
              CREATE TABLE scenario_trace (
                  id SERIAL PRIMARY KEY,
                  scenario_id VARCHAR(20) UNIQUE,
                  scenario_version VARCHAR(20),
                      scenario_type VARCHAR(50),
                  created_at TIMESTAMP DEFAULT to_timestamp(1687326842),
                  trace_id VARCHAR(40),
                      scenario_title VARCHAR(40),
                  CONSTRAINT unique_scenario UNIQUE (scenario_id, trace_id)
              );

              CREATE TABLE span (
                  id SERIAL PRIMARY KEY,
                  trace_id VARCHAR(40),
                  span_id VARCHAR(50),
                  parent_span_id VARCHAR(50),
                  source VARCHAR(50),
                  destination VARCHAR(50),
                  workload_id_list text[] DEFAULT NULL,
                  metadata JSONB,
                  latency_ms float,
                  protocol VARCHAR(50),
                  CONSTRAINT unique_trace_span_id_metadata UNIQUE (trace_id, span_id)
              );

              CREATE TABLE span_raw_data (
                  id SERIAL PRIMARY KEY,
                  trace_id VARCHAR(40),
                  span_id VARCHAR(50),
                  request_payload BYTEA,
                  response_payload BYTEA,
                  CONSTRAINT unique_trace_span_id_raw_data UNIQUE (trace_id, span_id)
              );


              CREATE TABLE IF NOT EXISTS scenario (
                  scenario_id      SERIAL PRIMARY KEY,
                  cluster_id     VARCHAR(255),
                  scenario_title VARCHAR(255),
                  disabled       BOOL DEFAULT FALSE,
                  disabled_by    VARCHAR(255) DEFAULT NULL,
                  disabled_at    BIGINT DEFAULT NULL,
                  scenario_type VARCHAR(50),
                  is_default      BOOLEAN DEFAULT false,
                  deleted        BOOLEAN DEFAULT FALSE,
                  deleted_by     VARCHAR(255) DEFAULT NULL,
                  deleted_at     BIGINT DEFAULT NULL
              );

              CREATE TABLE IF NOT EXISTS scenario_version (
                  scenario_version_id SERIAL PRIMARY KEY,
                  scenario_id INTEGER REFERENCES scenario (scenario_id),
                  scenario_data        BYTEA,
                  schema_version VARCHAR(255),   
                  scenario_version        BIGINT,
                  created_by     VARCHAR(255),
                  created_at     BIGINT
              );

              INSERT INTO scenario (cluster_id, scenario_title, scenario_type, is_default)
              VALUES ('Zk_default_cluster_id_for_all_scenarios', 'error', 'ERROR', true);

              INSERT INTO scenario (cluster_id, scenario_title, scenario_type, is_default)
              VALUES ('Zk_default_cluster_id_for_all_scenarios', 'exception_title', 'EXCEPTION', true);

              INSERT INTO scenario_version (scenario_id, scenario_data, schema_version, scenario_version, created_by, created_at)
              VALUES (2, '{"version":"1681624000","scenario_id":"2","scenario_title":"error_title","scenario_type":"error_type","enabled":true,"workloads":{"85e7c75f-f92b-55c0-86e5-5ecb5567142e":{"service":"*/*","trace_role":"server","protocol":"HTTP","rule":{"type":"","condition":"AND","rules":[{"type":"integer","id":"resp_status","field":"resp_status","input":"integer","operator":"not equal","value":"200"}]}}},"filter":{"type":"workload","condition":"AND","workload_ids":["79fff7de-e09b-5d28-af4c-e2c2e8d6f5e8"]}}', 'v1', 1687763051, 'vaibhav ', 1687763051);
              INSERT INTO scenario_version (scenario_id, scenario_data, schema_version, scenario_version, created_by, created_at)
              VALUES (1, '{"version":"1621224000","scenario_id":"1","scenario_title":"exception_title","scenario_type":"exception_type","enabled":true,"workloads":{"6c0daf9a-8a2a-516d-a80d-349cc0df2bc8":{"service":"zk-client/zk-operator","trace_role":"server","protocol":"HTTP","rule":{"type":"rule_group","condition":"AND","rules":[{"type":"string","id":"req_method","field":"req_method","input":"string","operator":"equal","value":"POST"},{"type":"string","id":"req_path","field":"req_path","input":"string","operator":"ends_with","value":"/exception"}]}}},"filter":{"type":"workload","condition":"AND","workload_ids":["6c0daf9a-8a2a-516d-a80d-349cc0df2bc8"]}}', 'v1', 1687763051, 'vaibhav ', 1687763051);

replicaCount: 1


restartPolicy: OnFailure
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "zk-operator"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8472

ingress:
  enabled: false
  className: ""
  annotations: 
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  hosts:
    - host: ''
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.

    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  averageUtilization: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

